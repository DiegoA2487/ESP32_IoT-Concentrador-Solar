#include <WiFi.h>
#include <time.h>
#include <ESP32Time.h>

const char* ssid = "DIEGO-PC";
const char* password = "wifidiego";
const int ledPin = 2; // Asume que el LED2 está conectado al pin GPIO 2

//Variables para conexción wifi
const int numIntentosPermitidos = 10;
const unsigned long minReconexion = 60000; // 60 segundos para reconexión
unsigned long ultimoIntentoConexion = 0;
int intentos = 0; // Variable global para contar intentos
bool primeraVez = true; // Bandera para la primera ejecución

// Configuración del servidor NTP
const char* ntpServer = "mx.pool.ntp.org";
const long gmtOffset_sec = (-6)*3600;  // GMT -6 para México
const int daylightOffset_sec = 3600;  // Horario de verano
ESP32Time rtc;

void setup() {
    Serial.begin(115200);
    pinMode(ledPin, OUTPUT);

    Serial.println("Prueba WIFI- Sincronización RTC con NTP");
    Serial.println("Estableciendo conexión");

    WiFi.begin(ssid, password);
    conectarWiFi(); // Intentar conectar al iniciar
}

void loop() {
    if (WiFi.status() != WL_CONNECTED) {    //! al parecer esto no se utiliza. Se mentiene atento a la conexión
        if (millis() - ultimoIntentoConexion > minReconexion) {
            conectarWiFi();
        }
    }

    // Aquí va el resto del programa...
    Serial.println("Tmestamp: " + rtc.getDateTime());
    delay(6000);                                        // Un delay para evitar la verificación constante
}

void conectarWiFi() {   //*! regresar a la función incial
    Serial.println("Conectando a Wi-Fi "+ String(ssid));
    while (WiFi.status() != WL_CONNECTED && intentos < numIntentosPermitidos) {
        delay(500);
        Serial.print(".");
        digitalWrite(ledPin, !digitalRead(ledPin));             // Parpadeo continuo
        intentos++;
    }
    if (intentos >= numIntentosPermitidos) {
        Serial.println("Máximo número de intentos alcanzado, no se pudo conectar");
        intentos = 0; // Reiniciar los intentos para el próximo ciclo
        ultimoIntentoConexion = millis();
    } else {
        Serial.println("Conectado a Wi-Fi");
        digitalWrite(ledPin, HIGH); // LED constante cuando está conectado
         if (primeraVez) {
            sincronizarRTC();
            primeraVez = false;
        }
    }
}

void sincronizarRTC() {
    Serial.println("Sincronización de RTC con NTP en curso");
    configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
    delay(6000); // Espera para que la hora se sincronice
    Serial.println("RTC sincronizado: " + rtc.getDateTime());
}

void blinkLed(int pin, int times, int delayTime) {
    for (int i = 0; i < times; i++) {
        digitalWrite(pin, HIGH);
        delay(delayTime);
        digitalWrite(pin, LOW);
        delay(delayTime);
    }
}
